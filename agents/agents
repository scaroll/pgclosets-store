#!/usr/bin/env node

import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

function runCommand(command, args = []) {
    return new Promise((resolve, reject) => {
        const child = spawn(command, args, { 
            stdio: 'inherit',
            cwd: __dirname 
        });
        
        child.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`Command failed with exit code ${code}`));
            }
        });
    });
}

async function main() {
    const args = process.argv.slice(2);
    const command = args[0];

    try {
        switch (command) {
            case 'debug':
                console.log('üöÄ Starting ChatGPT Agent Debug Session...');
                await runCommand('node', ['orchestrator.js', 'debug']);
                break;
                
            case 'setup':
                console.log('‚öôÔ∏è Setting up ChatGPT Agents...');
                await runCommand('npm', ['install']);
                console.log('‚úÖ Setup complete! Copy .env.template to .env and add your OpenAI API key');
                break;
                
            case 'status':
                console.log('üìä Agent System Status:');
                console.log('- Orchestrator: ‚úÖ Available');
                console.log('- OpenAI Integration: ‚úÖ Ready');
                console.log('- Multi-Agent Debug: ‚úÖ Ready');
                console.log('');
                console.log('Required: OPENAI_API_KEY in .env file');
                break;
                
            default:
                console.log(`
ü§ñ PG Closets ChatGPT Agent System

Usage: ./agents <command>

Commands:
  debug    Run multi-agent debugging session
  setup    Install dependencies and setup environment  
  status   Show system status

Quick Start:
1. ./agents setup
2. Copy .env.template to .env
3. Add your OpenAI API key to .env
4. ./agents debug

This system will analyze your PG Closets deployment using multiple specialized ChatGPT agents running in parallel for maximum speed and thoroughness.
                `);
        }
    } catch (error) {
        console.error('‚ùå Command failed:', error.message);
        process.exit(1);
    }
}

main();