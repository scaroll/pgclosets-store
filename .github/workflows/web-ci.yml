name: PG Closets - Triple-Tested CI/CD

on:
  pull_request:
    paths:
      - 'app/**'
      - 'src/**'
      - 'public/**'
      - 'components/**'
      - 'lib/**'
      - 'next.config.*'
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'tailwind.config.*'
      - 'tsconfig.json'
      - 'vercel.json'
    types: [opened, synchronize, reopened]
  
  push:
    branches: [main, master]
    paths:
      - 'app/**'
      - 'src/**'
      - 'public/**'
      - 'components/**'
      - 'lib/**'
      - 'next.config.*'
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'tailwind.config.*'
      - 'tsconfig.json'
      - 'vercel.json'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Stage 1: Lint & Unit Tests
  lint_and_unit:
    name: 'Stage 1: Lint & Unit Tests'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Build check
        run: npm run build

  # Stage 2: Preview Deploy & Testing (PRs only)
  preview_deploy_and_checks:
    name: 'Stage 2: Preview Deploy & Checks'
    runs-on: ubuntu-latest
    needs: lint_and_unit
    if: github.event_name == 'pull_request'
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "Preview deployed to: $url"

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run Smoke Tests on Preview
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ steps.deploy.outputs.preview-url }}
        run: npm run test:smoke

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          lhci autorun \
            --upload.target=temporary-public-storage \
            --collect.url="${{ steps.deploy.outputs.preview-url }}" \
            --collect.url="${{ steps.deploy.outputs.preview-url }}/store" \
            --collect.url="${{ steps.deploy.outputs.preview-url }}/store/products" \
            --assert.preset=lighthouse:no-pwa \
            --assert.assertions.performance=0.75 \
            --assert.assertions.accessibility=0.90 \
            --assert.assertions.best-practices=0.85

      - name: Run Visual Regression Tests
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ steps.deploy.outputs.preview-url }}
          PRODUCTION_URL: https://pgclosets-store.vercel.app
        run: |
          npm run test:visual || echo "Visual tests completed with differences"

      - name: Comment PR with Results
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            
            const comment = `## üöÄ Preview Deployment
            
            **Preview URL:** ${previewUrl}
            
            ### ‚úÖ Stage 1: Lint & Unit Tests
            - ‚úÖ Linting passed
            - ‚úÖ Unit tests passed
            - ‚úÖ Build successful
            
            ### üß™ Stage 2: Preview Testing
            - ‚úÖ Smoke tests completed
            - ‚úÖ Lighthouse audit completed
            - üì∏ Visual regression tests completed
            
            **Test the preview deployment:**
            - [Homepage](${previewUrl})
            - [Store](${previewUrl}/store)
            - [Products](${previewUrl}/store/products)
            
            ---
            *Automated by PG Closets CI/CD Pipeline*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Stage 3: Production Deploy & Post-Deploy Checks (main branch only)
  prod_deploy_and_postcheck:
    name: 'Stage 3: Production Deploy & Post-Deploy'
    runs-on: ubuntu-latest
    needs: lint_and_unit
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT
          echo "Production deployed to: $url"

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Run Post-Deploy Smoke Tests
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ steps.deploy.outputs.production-url }}
        run: |
          npm run test:smoke || {
            echo "‚ùå Post-deploy smoke tests failed!"
            echo "Consider rolling back deployment"
            exit 1
          }

      - name: Create Success Comment
        uses: actions/github-script@v7
        with:
          script: |
            const prodUrl = '${{ steps.deploy.outputs.production-url }}';
            
            // Find the latest commit
            const commit = context.sha.substring(0, 7);
            
            // Create issue comment for production deployment
            const comment = `## üéâ Production Deployment Successful
            
            **Production URL:** ${prodUrl}
            **Commit:** ${commit}
            
            ### ‚úÖ All Stages Completed Successfully
            - ‚úÖ Stage 1: Lint & Unit Tests
            - ‚úÖ Stage 3: Production Deploy & Smoke Tests
            
            **Live URLs:**
            - [üè† Homepage](${prodUrl})
            - [üõçÔ∏è Store](${prodUrl}/store)
            - [üì¶ Products](${prodUrl}/store/products)
            
            ---
            *Deployed via PG Closets Triple-Tested CI/CD Pipeline*`;

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed. Manual rollback may be required."
          echo "Last successful deployment URL: https://pgclosets-store.vercel.app"